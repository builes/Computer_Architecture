;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_waitvblank
	.export		_main

; ---------------------------------------------------------------
; This code adds two 16-bit numbers
; By: Ricardo Correa
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

; no trash
SEI

LDA 	#5
STA 	$AA ;factor 1 - low
LDA 	#5
STA 	$AB ;factor 1 - high
LDA 	#0
STA 	$AC ;signo factor 1
LDA 	#2
STA 	$55 ;factor2 - low
LDA 	#2
STA 	$56 ;factor2 - high
LDA 	#0
STA 	$57 ;signo factor2
;1 positivo, 0 negativo
;$70 low result
;$71 hihg result
;signo en $72


LDA		$AC
CMP		$57
BEQ		L1 			;si ambos signos son iguales
JMP		L2			;si los signos son diferentes

L1: CLC
	CMP #0
	BEQ L3 ;si ambos son 0
	JMP L4 ;si ambos son 1

L3: CLC
	LDA #0
	STA $72
	LDA $AA
	ADC $55
	STA $70
	LDA #0
	LDA $AB
	ADC $56
	STA $71
	JMP END

L4: CLC
	LDA #1
	STA $72
	LDA #0
	LDA $AA
	ADC $55
	STA $70
	LDA #0
	LDA $AB
	ADC $56
	STA $71
	JMP END

;¿Cuál número es mayor?
L2:	CLC
	LDA $AA
	CMP $55
	BCS L5	; AA >= 55
	JMP L6	; AA < 55

L5: LDA $AC
	STA $72
	LDA #0
	LDA $AA
	SBC $55
	JMP END

L6:	LDA $57
	STA $72
	LDA #0
	LDA $55
	SBC $AA
	JMP END

;end
END: JMP END

;while(1)
papa: JMP papa

.endproc
