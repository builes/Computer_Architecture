;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_waitvblank
	.export		_main

; ---------------------------------------------------------------
; This code prints fibonacci numbers until n=20
; By: Ricardo Correa
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	JSR     _waitvblank
	SEI

;PPU_ADDRESS = 0x20; //x
ldx     #$00
lda     #$20
sta     $2006
;PPU_ADDRESS = 0x41; //y
ldx     #$00
lda     #$41
sta     $2006
;PPU_ADDRESS = 0x3F;
ldx     #$00
lda     #$3F
sta     $2006
;PPU_ADDRESS = 0x00;
ldx     #$00
lda     #$00
sta     $2006
;PPU_DATA = 0x27;
ldx     #$00
lda     #$27
sta     $2007
;PPU_ADDRESS = 0x3F;
ldx     #$00
lda     #$3F
sta     $2006
;PPU_ADDRESS = 0x03;
ldx     #$00
lda     #$03
sta     $2006
;PPU_DATA = 0x30;
ldx     #$00
lda     #$30
sta     $2007
;POINTER
LDX    #$00
LDA    #$20
STA    $2006
LDX    #$00
LDA    #$41
STA    $2006

;fibonacci

;eight bits

;initial values
LDA #0
PHA
STA $a0

LDA #1
PHA
STA $a1

LDX #1

;posiciones para la respuesta
;a0 -> ad
EIGHT: CLC
PLA
STA $BA ;Temp
PLA
ADC $BA ;A = ANSWER
STA $BB ;Temp
LDA $BA
PHA
LDA $BB
PHA
STA $a1,X
INX
CPX #13
BNE EIGHT

;MIDDLE
PLA
STA $DA
PLA
STA $DB
LDA #0
PHA
LDA #0
PHA
LDA $DB
PHA
LDA $DA
PHA

LDX #0
LDY #0

;posiciones para la respuesta
;LOW: c0 -> c5
;HIGH d0 -> d5

SIXTEEN:
	;LOW ADDITION
	PLA
	STA $E0
	PLA
	CLC
	ADC $E0
	STA $E1

	;HIGH ADDITION
	PLA
	STA $E3
	PLA
	ADC $E3
	STA $E4

	;SAVING DATA
	LDA $E3
	PHA
	LDA $E4
	PHA
	STA $d0,Y
	INY
	LDA $E0
	PHA
	LDA $E1
	PHA
	STA $c0,X
	INX
	CPX #6
	BNE SIXTEEN

	;PRINT PRINT PRINT
	;HOW TO SEE THE NUMBERS IN DEBUGGER
	;FIRST ROUND (NUMBERS <= 8 BITS)
			;$a0 -> $ad
	;SECOND ROUND (NUMBERS <= 16 BITS)
			;LOW: c0 -> c5
			;HIGH d0 -> d5


;FIRST ROUND
LDX #0
FIRST: CLC
	LDA $a0,X
	INX
	CPX #15
	BNE START
	JMP SECOND


START:
	CMP #10
	BCS TEN
	ADC #48
	STA $2007
	;espacio
	LDA  #32
	STA $2007
	JMP FIRST


TEN: 
	CLC
    CMP #100
	BCS PREHUNDRED
	STA $54
	
	;DIVIDIR SOBRE 10
	
	LDA #10
	STA $55
	LDA #0
	LDY #8
	ASL $54

L1:  
	ROL
	MP $55
	BCC L2
	SBC $55

L2: 
	ROL $54
	DEY
	BNE L1
	;cero? terminamos
	STA $77
	LDA $54
	ADC #48
	STA $2007
	;another
	LDA $77
	ADC #48
	STA $2007
	;espacio
	LDA #32
	STA $2007
	JMP FIRST

PREHUNDRED: 
	CMP #144
	BEQ SPACE
	JMP HUNDRED

SPACE:			 
	STA $54
	LDA #32
 	STA $2007
	LDA #32
	STA $2007
	LDA #32
	STA $2007
	LDA $54

HUNDRED: 
	CLC
	STA $54
	
	;DIVIDIR SOBRE 100
	LDA #100
	STA $55
	LDA #0
	LDY #8
	ASL $54

L3:  
	ROL
	CMP $55
	BCC L4
	SBC $55

L4:  
	ROL $54
	DEY
	BNE L3
	STA $77

	;DIVIDIR SOBRE 10
	
	LDA #10
	STA $55
	LDA #0
	LDY #8
	ASL $77
	
L5:  
	ROL
	CMP $55
	BCC L6
	SBC $55
	
L6:  
	ROL $77
	DEY
	BNE L5
	STA $76
	;cero? terminamos
	LDA $54
	ADC #48
	STA $2007
	;another
	LDA $77
	ADC #48
	STA $2007
	;another
	LDA $76
	ADC #48
	STA $2007
	;espacio
	LDA #32
	STA $2007
	JMP FIRST

SECOND:
	LDX #0
	JMP POSTSECOND

POSTSECOND:
	LDA $c0,X
	STA $128 ;low
	LDA $d0,X
	STA $129 ;high
	INX
	CPX #4
    	BNE THIRD
    	JMP FOUR

;3 DIGITS
THIRD:
	
	;DIVIDIR SOBRE 100
	LDA #$64
	STA $12A
	LDA $129
	LDY #8
	ASL $128

L11:
	ROL
	BCS L22
	CMP $12A
	BCC L33
L22:
	SBC $12A
	SEC
L33:
	ROL $128
	DEY
	BNE L11
	STA $12D
	
	;DIVIDIR SOBRE 10
	LDA #$A
	STA $12A
	LDA #0
	LDY #8
	ASL $12D			

L111:
	ROL
	CMP $12A
	BCC L222
	SBC $12A

L222:
	ROL $12D
    	DEY
    	BNE L111
	STA $130
	;FINISH
	LDA $128
	ADC #48
	STA $2007
	;another
	LDA $12D
	ADC #48
	STA $2007
	;another
	LDA $130
	ADC	#48
	STA $2007
	;espacio
	LDA #32
	STA $2007
	JMP POSTSECOND

FOUR:
	LDX #0
	JMP PREFOUR

PREFOUR:
	LDA $c3,X
	STA $140 ;low
	LDA $d3,X
	STA $141 ;high
	CMP #$10
	BEQ SPACETAB
	JMP POSTFOUR

POSTFOUR:
	INX
	CPX #4
	BNE FIVE
    JMP ENDPROCESS

SPACETAB:
	LDA #32
 	STA $2007
 	LDA #32
	STA $2007
	LDA #32
	STA $2007
	LDA #0
	JMP POSTFOUR

FIVE: 
	LDA #$64
	STA $142
	LDA $141
	LDY #8
	ASL $140

L1111:
	ROL
	BCS L2222
	CMP $142
	BCC L3333

L2222:
	SBC $142
	SEC

L3333:
	ROL $140
	DEY
	BNE L1111
	STA $143
	;140 - primera parte
	;143 - segunda parte
	
	;PRIMERA DIVISION / 10
	LDA #$A
	STA $160
	LDA #0
    	LDY #8
    	ASL $140

L17:
    ROL
    CMP $160
    BCC L28
    SBC $160

L28:
    ROL $140
    DEY
    BNE L17
	STA $161
	;PRIMER DIGITO $140
	;SEGUNDO DIGITO 161

;SEGUNDA DIVISION / 10
	LDA #$A
	STA $162
	LDA #0
	LDY #8
	ASL $143

L177:
	ROL
	CMP $162
	BCC L288
	SBC $162

L288:
	ROL $143
	DEY
	BNE L177
	STA $163
	
	;PRIMER DIGITO $143
	
	;SEGUNDO DIGITO $163
	
	;FINISH
	LDA $140
	ADC #48
	STA $2007
	
	;another
	LDA $161
	ADC #48
	STA $2007
	
	;another
	LDA $143
	ADC #48
	STA $2007
	
	;another
	LDA $163
	ADC #48
	STA $2007
	
	;espacio
	LDA #32
	STA $2007
	JMP PREFOUR


ENDPROCESS:

; PPU_SCROLL = 0x00;
LDX     #$00
LDA     #$00
STA     $2005
; PPU_SCROLL = 0x00;
LDX     #$00
LDA     #$00
STA     $2005
; PPU_MASK = 8;
LDX     #$00
LDA     #$08
STA     $2001

MAIN: JMP MAIN
.endproc
